//
// Created by Tomáš Petříček on 13.08.2023.
//

#ifndef LEET_CODE_CHECK_IF_THERE_IS_A_VALID_PARTITION_FOR_THE_ARRAY_HPP
#define LEET_CODE_CHECK_IF_THERE_IS_A_VALID_PARTITION_FOR_THE_ARRAY_HPP

#include <vector>
#include <cassert>

namespace leet_code {
    constexpr int t = 1, f = 0, e = -1; // true, false, empty

    bool search(std::size_t i, std::vector<int>& mem, std::vector<int>& nums)
    {
        if (i==nums.size()) {
            return true;
        }
        if (mem[i]==e) {
            bool valid{false};
            if (i+1<nums.size() && nums[i]==nums[i+1]) {
                valid |= search(i+2, mem, nums);
            }
            if (i+2<nums.size()) {
                if ((nums[i]==nums[i+1] && nums[i+1]==nums[i+2])
                        || (nums[i]+1==nums[i+1] && nums[i+1]==nums[i+2]-1)) {
                    valid |= search(i+3, mem, nums);
                }
            }
            mem[i] = valid;
        }
        return mem[i];
    }

    bool validPartition(std::vector<int>& nums)
    {
        std::vector<int> mem(nums.size(), e);
        return search(0, mem, nums);
    }

    struct sample {
        std::vector<int> nums;
        bool res;
    };

    void test_valid_partition()
    {
        std::vector<sample> samples{
                {{4,    4,    4,    5,    6},       true},
                {{1,    1,    1,    2},             false},
                {{1,    2,    3,    4,    5,    6}, true},
                {{1,    1,    1,    1,    1,    1}, true},
                {{1,    2,    1,    1,    1},       false},
                {{1,    1},                         true},
                {{1,    1,    3,    4,    5},       true},
                {{9,    8,    7,    1,    1},       false},
                {{7,    8,    9,    10,   1,    2}, false},
                {{1,    2,    3,    3,    3},       true},
                {{1472, 1472, 1473, 1473, 1473, 1473, 1474, 1475, 1475, 1475, 1475, 1475, 1476, 1477, 1477, 1477, 1477,
                         1477, 1478, 1479, 1480, 1480, 1480, 1480, 1481, 1482, 1483, 1483, 1483, 1484, 1485, 1485, 1486, 1487,
                         1488, 1488, 1488, 1488, 1489, 1490, 1491, 1491, 1491, 1492, 1493, 1494, 1495, 1495, 1495, 1495, 1495,
                         1495, 1496, 1497, 1498, 1498, 1498, 1499, 1499, 1499, 1500, 1501, 1502, 1502, 1502, 1503, 1503, 1503,
                         1504, 1505, 1506, 1506, 1506, 1506, 1507, 1507, 1508, 1509, 1510, 1511, 1511, 1511, 1511, 1511, 1511,
                         1511, 1512, 1513, 1514, 1514, 1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516, 1517, 1517, 1517, 1518,
                         1518, 1518, 1518, 1518, 1518, 1518, 1518, 1519, 1519, 1520, 1520, 1520, 1521, 1522, 1523, 1523, 1523,
                         1523, 1524, 1525, 1526, 1527, 1528, 1528, 1529, 1530, 1531, 1531, 1531, 1532, 1533, 1534, 1534, 1534,
                         1535, 1536, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538, 1539, 1539, 1540, 1540, 1540,
                         1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1543, 1544, 1544, 1544, 1544, 1544, 1544,
                         1544, 1544, 1544, 1545, 1546, 1547, 1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548, 1548, 1549, 1549,
                         1549, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1555, 1555, 1555, 1556, 1557, 1557, 1558, 1559, 1560,
                         1561, 1562, 1563, 1563, 1563, 1564, 1564, 1564, 1565, 1566, 1567, 1568, 1568, 1568, 1568, 1568, 1568,
                         1568, 1568, 1568, 1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571, 1571,
                         1572, 1572, 1572, 1572, 1572, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1580, 1580, 1580,
                         1581, 1582, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584, 1585, 1586,
                         1586, 1586, 1586, 1586, 1587, 1587, 1587, 1588, 1588, 1588, 1588, 1588, 1588, 1589, 1590, 1591, 1591,
                         1591, 1592, 1592, 1592, 1593, 1593, 1593, 1594, 1594, 1594, 1595, 1595, 1595, 1595, 1595, 1596, 1596,
                         1596, 1596, 1596, 1597, 1597, 1598, 1598, 1598, 1599, 1599, 1599, 1600, 1601, 1602, 1602, 1602, 1602,
                         1602, 1603, 1604, 1604, 1604, 1605, 1605, 1605, 1605, 1606, 1607, 1608, 1608, 1608, 1609, 1610, 1610,
                         1610, 1610, 1610, 1610, 1611, 1611, 1611, 1612, 1612, 1612, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
                         1613, 1613, 1614, 1615, 1616, 1616, 1616, 1617, 1617, 1617, 1618, 1619, 1619, 1619, 1619, 1619, 1619,
                         1619, 1620, 1620, 1620, 1620, 1620, 1621, 1621, 1621, 1622, 1622, 1622, 1623, 1623, 1623, 1623, 1623,
                         1624, 1625, 1626, 1627, 1627, 1628, 1628, 1628, 1628, 1628, 1629, 1629, 1629, 1630, 1631, 1632, 1633,
                         1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634, 1635, 1635, 1635, 1635, 1635, 1636, 1636,
                         1636, 1637, 1637, 1637, 1638, 1638, 1638, 1638, 1638, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1644,
                         1644, 1644, 1644, 1645, 1646, 1646, 1646, 1646, 1647, 1648, 1648, 1648, 1648, 1649, 1649, 1649, 1650,
                         1651, 1652, 1652, 1652, 1652, 1653, 1653, 1653, 1653, 1654, 1655, 1656, 1657, 1658, 1658, 1658, 1658,
                         1658, 1658, 1658, 1659, 1660, 1660, 1660, 1660, 1660, 1661, 1662, 1663, 1663, 1663, 1664, 1664, 1665,
                         1665, 1665, 1666, 1667, 1668, 1668, 1668, 1668, 1669, 1669, 1670, 1671, 1672, 1672, 1672, 1672, 1672,
                         1672, 1672, 1672, 1672, 1673, 1673, 1673, 1673, 1674, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
                         1676, 1676, 1676, 1677, 1677, 1677, 1677, 1677, 1678, 1678, 1678, 1678, 1678, 1679, 1679, 1679, 1680,
                         1680, 1680, 1681, 1681, 1681, 1682, 1682, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1689, 1690,
                         1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1698, 1698, 1699, 1700, 1701, 1701, 1701, 1702, 1702,
                         1702},                     true},
        };
        for (auto& s: samples) {
            assert(s.res==validPartition(s.nums));
        }
    }
}

#endif //LEET_CODE_CHECK_IF_THERE_IS_A_VALID_PARTITION_FOR_THE_ARRAY_HPP
